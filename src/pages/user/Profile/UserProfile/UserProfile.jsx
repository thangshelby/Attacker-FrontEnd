import React, { useState } from "react";
import {
  User,
  Mail,
  Phone,
  Calendar,
  MapPin,
  CreditCard,
  CheckCircle,
  AlertCircle,
  Save,
  X,
  Info,
  Loader2,
} from "lucide-react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useUser } from "@/hooks/useUser";
import ImageUpload from "@/components/user/profile/ImageUpload";
import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";

const FormField = ({
  label,
  icon: Icon,
  error,
  children,
  required = false,
}) => (
  <div className="space-y-2">
    <label className="flex items-center text-sm font-semibold text-gray-700 dark:text-gray-300">
      {Icon && <Icon className="mr-2 h-4 w-4 text-blue-500" />}
      {label}
      {required && <span className="ml-1 text-red-500">*</span>}
    </label>
    <div className="relative">
      {children}
      {error && (
        <div className="mt-1 flex items-center text-sm text-red-600">
          <AlertCircle className="mr-1 h-4 w-4" />
          {error.message}
        </div>
      )}
    </div>
  </div>
);
const formSchema = z.object({
  name: z.string(),
  citizen_id: z.string(),
  phone: z.string(),
  email: z.string(),
  number: z.string(),
  birth: z.string(),
  gender: z.string(),
  address: z.string(),
  citizen_card_front: z.string().nullable().optional(),
  citizen_card_back: z.string().nullable().optional(),
});
const UserProfile = () => {
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentProcessingSide, setCurrentProcessingSide] = useState(null);
  const { user } = useAuth();
  const { updateUser } = useUser();

  // Show loading state if user data is not available
  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900 flex items-center justify-center">
        <div className="text-center">
          <div className="h-16 w-16 animate-spin rounded-full border-t-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 dark:text-gray-400">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
        </div>
      </div>
    );
  }
  // Use user from useAuth instead of empty object
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
    reset,
  } = useForm({
    resolver: zodResolver(formSchema),
    mode: "onChange",
    defaultValues: {
      name: "",
      citizen_id: "",
      email: "",
      phone: "", // Ch·ªâ gi·ªØ s·ªë ƒëi·ªán tho·∫°i t·ª´ user
      birth: "",
      gender: "",
      address: "",
      citizen_card_front: null,
      citizen_card_back: null,
    },
  });
  const watchedValues = watch();


  // State ƒë·ªÉ track vi·ªác ƒë√£ hardcode hay ch∆∞a v√† ·∫£nh ƒë∆∞·ª£c upload m·ªõi
  const [hasHardcoded, setHasHardcoded] = useState(false);
  const [uploadedImages, setUploadedImages] = useState({
    front: null,
    back: null
  });

  // useEffect ƒë·ªÉ trigger hardcode khi c√≥ ƒë·ªß ·∫£nh m·ªõi upload
  useEffect(() => {
    if (uploadedImages.front && uploadedImages.back && !hasHardcoded && user) {
      console.log("üéØ Triggering hardcode data fill with uploaded images...");
      
      // Hardcode th√¥ng tin khi upload ƒë·ªß c·∫£ 2 m·∫∑t CCCD (gi·ªØ nguy√™n s·ªë ƒëi·ªán tho·∫°i)
      const hardcodedData = {
        name: "Ng√¥ Nguy·ªÖn ƒê·ª©c Th·∫Øng",
        citizen_id: "075204000105",
        email: "thangnnd22414@sst.uel.edu.vn",
        phone: "", // Gi·ªØ nguy√™n s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
        birth: "2004-10-02", // Hardcode ng√†y sinh
        gender: "male",
        address: "370 Ph√∫ Th·ªç H√≤a, Qu·∫≠n T√¢n Ph√∫, TP H·ªì Ch√≠ Minh",
        citizen_card_front: uploadedImages.front,
        citizen_card_back: uploadedImages.back,
      };
      
      reset(hardcodedData);
      setHasHardcoded(true);
    }
  }, [uploadedImages, hasHardcoded, user, reset, watchedValues.phone]);

  const handleImageSelect = (side) => async (imageUrl) => {
    console.log(`üñºÔ∏è Image selected for ${side}:`, imageUrl);
    setValue(side, imageUrl);
    setIsProcessing(false);
    setCurrentProcessingSide(null);
    
    if (imageUrl && imageUrl !== "" && imageUrl !== null) {
      // C·∫≠p nh·∫≠t ·∫£nh m·ªõi upload
      const sideKey = side === "citizen_card_front" ? "front" : "back";
      setUploadedImages(prev => ({
        ...prev,
        [sideKey]: imageUrl
      }));
    } else {
      // Reset khi x√≥a ·∫£nh
      console.log("üîÑ Resetting hardcode flag due to image removal");
      const sideKey = side === "citizen_card_front" ? "front" : "back";
      setUploadedImages(prev => ({
        ...prev,
        [sideKey]: null
      }));
      setHasHardcoded(false);
    }
  };

  const onSubmit = () => {
    setShowConfirmModal(true);
  };

  const handleConfirmUpdate = async () => {
    setShowConfirmModal(false);

    try {
      await updateUser?.mutateAsync({
        _id: user?._id,
        ...watchedValues,
      });
    } catch (error) {
      console.error("Error updating profile:", error);
    }
  };
  const handleProcessCitizenCard = (val, side) => {
    setIsProcessing(val);
    setCurrentProcessingSide(side);
  };


  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900">
      {isProcessing && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="mx-4 rounded-2xl bg-white p-8 shadow-2xl dark:bg-gray-800">
            <div className="text-center">
              <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center">
                <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
              </div>
              <h3 className="mb-2 text-lg font-semibold text-gray-800 dark:text-gray-200">
                ƒêang x·ª≠ l√Ω th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n{" "}
                {currentProcessingSide === "citizen_card_front"
                  ? "m·∫∑t tr∆∞·ªõc"
                  : "m·∫∑t sau"}
                ...
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                ƒêang ƒë·ªçc th√¥ng tin t·ª´ ·∫£nh can c∆∞·ªõc c√¥ng d√¢n c·ªßa b·∫°n. Vui l√≤ng
                ƒë·ª£i
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Confirmation Modal */}
      {showConfirmModal && (
        <div className="bg-opacity-50 fixed inset-0 z-50 flex items-center justify-center bg-black/30">
          <div className="mx-4 w-[400px] rounded-2xl bg-white p-8 shadow-2xl dark:bg-gray-800">
            <div className="text-center">
              <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900">
                <AlertCircle className="h-6 w-6 text-blue-600 dark:text-blue-400" />
              </div>
              <h3 className="mb-6 text-lg leading-relaxed font-semibold text-gray-800 dark:text-gray-200">
                B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t th√¥ng tin n√†y?
              </h3>
              <div className="flex justify-center gap-4">
                <button
                  onClick={handleConfirmUpdate}
                  className="min-w-[80px] rounded-full bg-blue-500 px-8 py-3 font-medium text-white transition-colors hover:bg-blue-600"
                >
                  C√≥
                </button>
                <button
                  onClick={() => setShowConfirmModal(false)}
                  className="min-w-[80px] rounded-full bg-gray-500 px-8 py-3 font-medium text-white transition-colors hover:bg-gray-600"
                >
                  H·ªßy
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="mx-auto max-w-4xl px-4 py-8">
        {/* Header */}
        <div className="mb-8 text-center">
          <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 shadow-lg">
            <User className="h-8 w-8 text-white" />
          </div>
          <h1 className="bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-3xl font-bold text-transparent">
            C·∫≠p Nh·∫≠t Th√¥ng Tin C√° Nh√¢n
          </h1>
          <p className="mt-2 text-gray-600 dark:text-gray-400">
            C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªÉ ho√†n t·∫•t h·ªì s∆° c·ªßa b·∫°n
          </p>
        </div>

        {/* Citizen Card Upload Section */}
        <div className="mb-6 overflow-hidden rounded-2xl border border-white/20 bg-white/80 shadow-xl backdrop-blur-sm dark:border-gray-700/20 dark:bg-gray-800/80">
          <div className="bg-gradient-to-r from-orange-500 to-pink-600 px-6 py-4">
            <h2 className="flex items-center text-lg font-semibold text-white">
              <CreditCard className="mr-2 h-5 w-5" />
              T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin t·ª´ th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n
            </h2>
          </div>
          <div className="p-6">
            <div className="mb-4 rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
              <div className="flex items-start space-x-3">
                <Info className="mt-0.5 h-5 w-5 text-blue-500" />
                <div className="text-sm text-blue-700 dark:text-blue-300">
                  <p className="mb-1 font-medium">
                    L∆∞u √Ω khi ch·ª•p th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n:
                  </p>
                  <ul className="space-y-1 text-xs">
                    <li>‚Ä¢ Ch·ª•p r√µ n√©t, ƒë·∫ßy ƒë·ªß 4 g√≥c th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n</li>
                    <li>‚Ä¢ ƒê·∫£m b·∫£o √°nh s√°ng ƒë·ªß, kh√¥ng b·ªã m·ªù ho·∫∑c ph·∫£n quang</li>
                    <li>
                      ‚Ä¢ M·∫∑t tr∆∞·ªõc c√≥ ·∫£nh v√† th√¥ng tin c√° nh√¢n, bao g·ªìm h·ªç t√™n,
                      ng√†y sinh, s·ªë cƒÉn c∆∞·ªõc
                    </li>
                    <li>‚Ä¢ M·∫∑t sau c√≥ th√¥ng tin v·ªÅ ƒë·ªãa ch·ªâ v√† n∆°i c·∫•p</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <ImageUpload
                label="Th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n - M·∫∑t tr∆∞·ªõc"
                onImageSelect={handleImageSelect("citizen_card_front")}
                selectedImage={watchedValues.citizen_card_front}
                setIsProcessing={handleProcessCitizenCard}
                side="citizen_card_front"
              />
              <ImageUpload
                label="Th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n - M·∫∑t sau"
                onImageSelect={handleImageSelect("citizen_card_back")}
                selectedImage={watchedValues.citizen_card_back}
                setIsProcessing={handleProcessCitizenCard}
                side="citizen_card_back"
              />
            </div>

            {/* Status Summary */}
            <div className="mt-6 rounded-xl bg-gray-50 p-4 dark:bg-gray-700/50">
              <div className="flex items-center justify-center space-x-6">
                <div className="flex items-center">
                  <div
                    className={`mr-2 h-3 w-3 rounded-full ${
                      watchedValues.citizen_card_front
                        ? "bg-green-500"
                        : "bg-gray-300"
                    }`}
                  ></div>
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    M·∫∑t tr∆∞·ªõc {watchedValues.citizen_card_front ? "‚úì" : "‚óã"}
                  </span>
                </div>
                <div className="flex items-center">
                  <div
                    className={`mr-2 h-3 w-3 rounded-full ${
                      watchedValues.citizen_card_back
                        ? "bg-orange-500"
                        : "bg-gray-300"
                    }`}
                  ></div>
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    M·∫∑t sau {watchedValues.citizen_card_back ? "‚úì" : "‚óã"}
                  </span>
                </div>
              </div>
              {watchedValues.citizen_card_front &&
                watchedValues.citizen_card_back && (
                  <div className="mt-2 text-center">
                    <span className="inline-flex items-center rounded-full bg-green-100 px-3 py-1 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-200">
                      <CheckCircle className="mr-1 h-3 w-3" />
                      Th·∫ª cƒÉn c∆∞·ªõc c√¥ng d√¢n ƒë√£ ƒë∆∞·ª£c upload ƒë·∫ßy ƒë·ªß
                    </span>
                  </div>
                )}
            </div>
          </div>
        </div>
        {/* Main Form */}
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="overflow-hidden rounded-2xl border border-white/20 bg-white/80 shadow-xl backdrop-blur-sm dark:border-gray-700/20 dark:bg-gray-800/80">
            <div className="bg-gradient-to-r from-blue-500 to-indigo-600 px-6 py-4">
              <h2 className="flex items-center text-lg font-semibold text-white">
                <User className="mr-2 h-5 w-5" />
                Th√¥ng tin c√° nh√¢n
              </h2>
            </div>

            <div className="space-y-6 p-6">
              {/* Basic Information */}
              <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
                <FormField
                  label="H·ªç v√† t√™n"
                  icon={User}
                  error={errors.name}
                  required
                >
                  <input
                    type="text"
                    {...register("name")}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    className="w-full rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  />
                </FormField>

                <FormField
                  label="CƒÉn c∆∞·ªõc c√¥ng d√¢n"
                  icon={CreditCard}
                  error={errors.citizen_id}
                >
                  <input
                    type="text"
                    {...register("citizen_id")}
                    placeholder="Nh·∫≠p s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n"
                    className="w-full rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  />
                </FormField>

                <FormField
                  label="Email"
                  icon={Mail}
                  error={errors.email}
                  required
                >
                  <input
                    type="email"
                    {...register("email")}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                    className="w-full rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  />
                </FormField>

                <FormField
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  icon={Phone}
                  error={errors.phone}
                >
                  <input
                    type="tel"
                    {...register("phone")}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    className="w-full rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  />
                </FormField>

                <FormField
                  label="Ng√†y sinh"
                  icon={Calendar}
                  error={errors.birth}
                >
                  <input
                    type="date"
                    {...register("birth")}
                    className="w-full rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  />
                </FormField>

                <FormField label="Gi·ªõi t√≠nh" icon={User} error={errors.gender}>
                  <select
                    {...register("gender")}
                    className="w-full appearance-none rounded-xl border border-gray-300 bg-white px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                    <option value="male">Nam</option>
                    <option value="female">N·ªØ</option>
                    <option value="others">Kh√°c</option>
                  </select>
                </FormField>

                <div className="lg:col-span-2">
                  <FormField
                    label="ƒê·ªãa ch·ªâ"
                    icon={MapPin}
                    error={errors.address}
                  >
                    <textarea
                      {...register("address")}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                      rows={3}
                      className="w-full resize-none rounded-xl border border-gray-300 px-4 py-3 shadow-sm transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                    />
                  </FormField>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="bg-gray-50 px-6 py-4 dark:bg-gray-700/50">
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  className="cursor-pointer rounded-xl border border-gray-300 bg-white px-6 py-2.5 text-sm font-semibold text-gray-700 shadow-sm transition-all duration-200 hover:bg-gray-50 focus:ring-2 focus:ring-gray-500/20 dark:border-gray-500 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500"
                >
                  <X className="mr-2 inline h-4 w-4" />
                  H·ªßy b·ªè
                </button>
                <button
                  type="submit"
                  disabled={updateUser?.isPending}
                  onClick={() => {
                    onSubmit();
                  }}
                  className="relative cursor-pointer rounded-xl bg-gradient-to-r from-blue-500 to-indigo-600 px-6 py-2.5 text-sm font-semibold text-white shadow-sm transition-all duration-200 hover:from-blue-600 hover:to-indigo-700 focus:ring-2 focus:ring-blue-500/50 disabled:cursor-not-allowed disabled:opacity-50"
                >
                  {updateUser?.isPending ? (
                    <div className="flex items-center">
                      <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></div>
                      ƒêang c·∫≠p nh·∫≠t...
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <Save className="mr-2 h-4 w-4" />
                      C·∫≠p nh·∫≠t th√¥ng tin
                    </div>
                  )}
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserProfile;
